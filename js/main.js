// Generated by CoffeeScript 1.4.0
(function() {
  var Interface, MapData, Navigator, Station, Waypoint, colorPin, initialize, loadMap, loadWeather, pinColors, pins,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  Waypoint = (function() {

    function Waypoint(lat, lng, title, description, icon, shadow) {
      this.title = title;
      this.description = description != null ? description : "";
      this.icon = icon;
      this.shadow = shadow;
      this.location = new google.maps.LatLng(lat, lng);
    }

    Waypoint.prototype.show = function(map) {
      var marker, options;
      options = {
        position: this.location,
        map: map,
        title: this.title,
        icon: this.icon,
        shadow: this.shadow
      };
      return marker = new google.maps.Marker(options);
    };

    return Waypoint;

  })();

  Station = (function(_super) {

    __extends(Station, _super);

    function Station(station) {
      var thisPin;
      if (station.availableBikes > 0 && station.statusValue === "In Service") {
        thisPin = new colorPin(pinColors.bikeAvailable);
      } else {
        thisPin = new colorPin(pinColors.bikeNotAvailable);
      }
      Station.__super__.constructor.call(this, station.latitude, station.longitude, station.stationName, "", thisPin.pinImage(), thisPin.pinShadow());
    }

    return Station;

  })(Waypoint);

  MapData = (function() {

    function MapData() {}

    MapData.stations = [];

    MapData.destinations = [];

    MapData.prototype.fetch = function(callback) {
      var _this = this;
      return this._fetchStations(function(data) {
        _this.stations = data;
        return _this._fetchDestinations(function(data) {
          _this.destinations = data;
          return callback();
        });
      });
    };

    MapData.prototype.show = function(map) {
      var p, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.stations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.show(map);
      }
      _ref1 = this.destinations;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        _results.push(p.show(map));
      }
      return _results;
    };

    MapData.prototype._fetchStations = function(callback) {
      return $.getJSON('bikedata.php', function(data) {
        var stationData, stationPoint, stationPoints, _i, _len, _ref;
        stationPoints = [];
        _ref = data.stationBeanList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stationData = _ref[_i];
          stationPoint = new Station(stationData);
          stationPoints.push(stationPoint);
        }
        return callback(stationPoints);
      });
    };

    MapData.prototype._fetchDestinations = function(callback) {
      return $.get('locations/filmdata.csv', function(data) {
        return $.csv.toObjects(data, {}, function(err, data) {
          var item, itemWaypoint, waypoints, _i, _len;
          waypoints = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            item = data[_i];
            itemWaypoint = new Waypoint(item.latitude, item.longitude, item.title, item.description, "img/noun_project_16712.png");
            waypoints.push(itemWaypoint);
          }
          return callback(waypoints);
        });
      });
    };

    return MapData;

  })();

  pinColors = {
    bikeAvailable: '00FF00',
    bikeNotAvailable: '0000FF'
  };

  pins = {
    film: "img/noun_project_16712.png"
  };

  colorPin = (function() {

    function colorPin(color) {
      this.color = color != null ? color : "FE7569";
    }

    colorPin.prototype.pinImage = function() {
      return new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + this.color, new google.maps.Size(21, 34), new google.maps.Point(0, 0), new google.maps.Point(10, 34));
    };

    colorPin.prototype.pinShadow = function() {
      return new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_shadow", new google.maps.Size(40, 37), new google.maps.Point(0, 0), new google.maps.Point(12, 35));
    };

    return colorPin;

  })();

  loadWeather = function() {
    var feedUrl, jsonUrl;
    feedUrl = "http://weather.yahooapis.com/forecastrss?w=12761716&u=f";
    jsonUrl = "https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&q=" + encodeURIComponent(feedUrl) + "&callback=?";
    return $.getJSON(jsonUrl, function(data) {
      var match, re, weatherString;
      weatherString = data.responseData.feed.entries[0].contentSnippet;
      re = /Current Conditions:\n(.*?)\n/;
      match = weatherString.match(re);
      return $("#weather").text(match[1]);
    });
  };

  loadMap = function() {
    var bikeLayer, map, mapOptions;
    mapOptions = {
      center: new google.maps.LatLng(40.714346, -74.005966),
      zoom: 12,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    google.maps.visualRefresh = true;
    map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
    bikeLayer = new google.maps.BicyclingLayer();
    bikeLayer.setMap(map);
    return map;
  };

  Navigator = (function() {

    function Navigator(map, stations, destinations) {
      this.map = map;
      this.stations = stations;
      this.destinations = destinations;
      this.directionsService = new google.maps.DirectionsService();
      this.geocoder = new google.maps.Geocoder();
      this.directionsDisplay = new google.maps.DirectionsRenderer();
      this.directionsDisplay.setMap(map);
    }

    Navigator.prototype._directions = function(options, callback) {
      return this.directionsService.route(options, function(result, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          return callback(result);
        }
      });
    };

    Navigator.prototype._distance = function(LatLng1, LatLng2) {
      return Math.pow(LatLng1.lat() - LatLng2.lat(), 2) + Math.pow(LatLng1.lng() - LatLng2.lng(), 2);
    };

    Navigator.prototype._distance_raw = function(a, b) {
      return Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2);
    };

    Navigator.prototype._LatLng_to_raw = function(LatLng) {
      return [LatLng.lat(), LatLng.lng()];
    };

    Navigator.prototype._sort_array_by_distance = function(array) {
      var compare;
      compare = function(a, b) {
        if (a[0] < b[0]) {
          return -1;
        }
        if (a[0] > b[0]) {
          return 1;
        }
        return 0;
      };
      array.sort(compare);
      return array;
    };

    Navigator.prototype.geocode = function(address, callback) {
      return this.geocoder.geocode({
        address: address
      }, function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          return callback(results[0].geometry.location);
        }
      });
    };

    Navigator.prototype.nearestStation = function(location) {
      var distance, minDistance, nearest, station, _i, _len, _ref;
      minDistance = Infinity;
      nearest = null;
      _ref = this.stations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        station = _ref[_i];
        distance = this._distance(station.location, location);
        if (distance < minDistance) {
          nearest = station;
          minDistance = distance;
        }
      }
      return nearest;
    };

    Navigator.prototype._nearestDestinations = function(path, count) {
      var DirectionsWaypoints, a, all, destination, i, list, point, _i, _j, _len, _len1, _ref;
      all = [];
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        point = path[_i];
        a = [point.jb, point.kb];
        list = [];
        _ref = this.destinations;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          destination = _ref[_j];
          list.push([this._distance_raw(a, this._LatLng_to_raw(destination.location)), destination]);
        }
        list = this._sort_array_by_distance(list).slice(0, +count + 1 || 9e9);
        all = all.concat(list);
      }
      all = this._sort_array_by_distance(all).slice(0, +count + 1 || 9e9);
      DirectionsWaypoints = (function() {
        var _k, _len2, _results;
        _results = [];
        for (_k = 0, _len2 = all.length; _k < _len2; _k++) {
          i = all[_k];
          _results.push({
            location: i[1].location
          });
        }
        return _results;
      })();
      console.log(DirectionsWaypoints);
      return DirectionsWaypoints;
    };

    Navigator.prototype.calculate = function(start, end, destinationCount, callback) {
      var _this = this;
      return this.geocode(start, function(location) {
        var startLoc;
        startLoc = location;
        return _this.geocode(end, function(location) {
          var endLoc, endStation, options, startStation;
          endLoc = location;
          startStation = _this.nearestStation(startLoc);
          endStation = _this.nearestStation(endLoc);
          options = {
            origin: startStation.location,
            destination: endStation.location,
            travelMode: google.maps.TravelMode.BICYCLING
          };
          return _this._directions(options, function(result) {
            var DirectionsWaypoints;
            DirectionsWaypoints = _this._nearestDestinations(result.routes[0].overview_path, destinationCount);
            options = {
              origin: startStation.location,
              destination: endStation.location,
              travelMode: google.maps.TravelMode.BICYCLING,
              optimizeWaypoints: true,
              waypoints: DirectionsWaypoints
            };
            return _this._directions(options, function(result) {
              _this._print(result);
              return callback(result);
            });
          });
        });
      });
    };

    Navigator.prototype._print = function(result) {
      var arrival, arrival_string, departure, departure_string, end_wrap, hours, i, instr_text, item, leg, leg_end, leg_wrap, minutes, start_wrap, step, step_wrap, time_wrap, total_time, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results;
      console.log(result);
      this.directionsDisplay.setDirections(result);
      $(".directions").html("");
      leg_end = [];
      total_time = 0;
      _ref = result.routes[0].legs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        leg = _ref[_i];
        total_time += leg.duration.value;
      }
      minutes = Math.ceil(total_time / 60);
      hours = Math.floor(minutes / 60);
      minutes = minutes % 60;
      if (hours > 0) {
        time_wrap = '<div class="dist-time-total">Total Travel Time: ' + hours + ' hours' + minutes + ' minutes' + '</div><br/>';
      } else {
        time_wrap = '<div class="dist-time-total">Total Travel Time: ' + minutes + ' minutes' + '</div><br/>';
      }
      $(time_wrap).appendTo('div.directions');
      departure_string = result.routes[0].legs[0].start_address;
      departure = departure_string.split(",");
      start_wrap = '<div class="departure"><b>' + departure[0] + '</b><br/>';
      _ref1 = departure.slice(1);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        start_wrap += item + ',';
      }
      start_wrap = start_wrap.substring(0, start_wrap.lastIndexOf(','));
      start_wrap += '<br/><br/></div>';
      $(start_wrap).appendTo('div.directions');
      _ref2 = result.routes[0].legs;
      _results = [];
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        leg = _ref2[i];
        leg_end.push(leg.end_address);
        leg_wrap = '<ol class="directions">';
        $(leg_wrap).appendTo('div.directions');
        _ref3 = leg.steps;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          step = _ref3[_l];
          instr_text = step.instructions.replace('<div>', '<br/><span>');
          instr_text = step.instructions.replace('</div>', '</span>');
          step_wrap = "<li>" + instr_text + '<br/><div class="dist-time">' + step.distance.text + " - about " + step.duration.text + "</div></li>";
          $(step_wrap).appendTo('ol.directions');
        }
        leg_wrap = '<div class="dist-time-lg">' + leg.distance.text + " - about " + leg.duration.text + "</div><hr><br/>";
        $(leg_wrap).appendTo('div.directions');
        arrival_string = leg.end_address;
        arrival = arrival_string.split(",");
        if (i !== result.routes[0].legs.length - 1) {
          end_wrap = '</ol><div class="waypoint"><b>' + arrival[i] + '</b><br/>';
        } else {
          end_wrap = '</ol><div class="arrival"><b>' + arrival[i] + '</b><br/>';
        }
        _ref4 = arrival.slice(1);
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          item = _ref4[_m];
          end_wrap += item + ',';
        }
        end_wrap = end_wrap.substring(0, end_wrap.lastIndexOf(','));
        end_wrap += '<br/><br/></div>';
        _results.push($(end_wrap).appendTo('div.directions'));
      }
      return _results;
    };

    return Navigator;

  })();

  Interface = (function() {

    function Interface(map, fetcher, nav) {
      this.map = map;
      this.fetcher = fetcher;
      this.nav = nav;
      $("#directions_form").submit(function(e) {
        var end, start, stops;
        e.preventDefault();
        start = $("#start").val();
        end = $("#end").val();
        stops = $("#stops").val();
        nav.calculate(start, end, stops, function(data) {
          return console.log(data);
        });
        return false;
      });
    }

    return Interface;

  })();

  initialize = function() {
    var fetcher, map;
    loadWeather();
    map = loadMap();
    fetcher = new MapData();
    return fetcher.fetch(function() {
      var nav, ui;
      fetcher.show(map);
      nav = new Navigator(map, fetcher.stations, fetcher.destinations);
      return ui = new Interface(map, fetcher, nav);
    });
  };

  $(document).ready(function() {
    return initialize();
  });

}).call(this);
